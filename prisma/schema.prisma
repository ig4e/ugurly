// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model Url {
    id        String    @id @default(cuid())
    slug      String?   @unique
    url       String
    password  String?
    clicks    Int       @default(0)
    maxClicks Int?
    endAt     DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    createdBy   User?   @relation(fields: [createdById], references: [id])
    createdById String?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    urls          Url[]
    keys          Key[]
}

model Key {
    id          String  @id @default(uuid())
    name        String?
    secret      String  @unique @default(cuid())
    createdBy   User    @relation(fields: [createdById], references: [id])
    createdById String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
